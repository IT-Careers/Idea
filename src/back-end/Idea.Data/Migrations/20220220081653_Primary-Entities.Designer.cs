// <auto-generated />
using System;
using Idea.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Idea.Data.Migrations
{
    [DbContext(typeof(IdeaDbContext))]
    [Migration("20220220081653_Primary-Entities")]
    partial class PrimaryEntities
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Idea.Data.Models.CelestialObjects.MaterialDeposit", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BasicMaterialId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PlanetaryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BasicMaterialId");

                    b.HasIndex("PlanetaryId");

                    b.ToTable("MaterialDeposits");
                });

            modelBuilder.Entity("Idea.Data.Models.CelestialObjects.Planetary", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Atmosphere")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsHabitable")
                        .HasColumnType("bit");

                    b.Property<string>("LocationId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PlanetaryTypeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("PlanetaryTypeId");

                    b.ToTable("Planetaries");
                });

            modelBuilder.Entity("Idea.Data.Models.CelestialObjects.PlanetaryType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PlanetaryTypes");
                });

            modelBuilder.Entity("Idea.Data.Models.CelestialObjects.Star", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LocationId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Stars");
                });

            modelBuilder.Entity("Idea.Data.Models.IdeaUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Idea.Data.Models.Locations.Coordinate", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LocationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PlanetaryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StarId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("X")
                        .HasColumnType("bigint");

                    b.Property<long>("Y")
                        .HasColumnType("bigint");

                    b.Property<long>("Z")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("PlanetaryId");

                    b.HasIndex("StarId");

                    b.ToTable("Coordinates");
                });

            modelBuilder.Entity("Idea.Data.Models.Locations.Location", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LocationTypeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("LocationTypeId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Idea.Data.Models.Locations.LocationType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LocationTypes");
                });

            modelBuilder.Entity("Idea.Data.Models.Materials.BasicChemical", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BasicChemicals");
                });

            modelBuilder.Entity("Idea.Data.Models.Materials.BasicMaterial", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsProcessed")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BasicMaterials");
                });

            modelBuilder.Entity("Idea.Data.Models.Materials.ComplexMaterial", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ComplexMaterials");
                });

            modelBuilder.Entity("Idea.Data.Models.Materials.ComplexMaterialRequirement", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BasicMaterialId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ComplexMaterialId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BasicMaterialId");

                    b.HasIndex("ComplexMaterialId");

                    b.ToTable("ComplexMaterialRequirements");
                });

            modelBuilder.Entity("Idea.Data.Models.Ships.Spaceship", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Capacity")
                        .HasColumnType("float");

                    b.Property<DateTime>("FTLCooldown")
                        .HasColumnType("datetime2");

                    b.Property<double>("FuelPercentage")
                        .HasColumnType("float");

                    b.Property<double>("HullIntegrityPercentage")
                        .HasColumnType("float");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("X")
                        .HasColumnType("bigint");

                    b.Property<long>("Y")
                        .HasColumnType("bigint");

                    b.Property<long>("Z")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Ships");
                });

            modelBuilder.Entity("Idea.Data.Models.Stations.FarmStation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.ToTable("FarmStations");
                });

            modelBuilder.Entity("Idea.Data.Models.Stations.NecessitiesStation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.ToTable("NecessitiesStations");
                });

            modelBuilder.Entity("Idea.Data.Models.Stations.NuclearStation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.ToTable("NuclearStations");
                });

            modelBuilder.Entity("Idea.Data.Models.Stations.ProcessingStation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.ToTable("ProcessingStations");
                });

            modelBuilder.Entity("Idea.Data.Models.Stations.RecyclingStation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.ToTable("RecyclingStations");
                });

            modelBuilder.Entity("Idea.Data.Models.CelestialObjects.MaterialDeposit", b =>
                {
                    b.HasOne("Idea.Data.Models.Materials.BasicMaterial", "BasicMaterial")
                        .WithMany()
                        .HasForeignKey("BasicMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Idea.Data.Models.CelestialObjects.Planetary", "Planetary")
                        .WithMany()
                        .HasForeignKey("PlanetaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BasicMaterial");

                    b.Navigation("Planetary");
                });

            modelBuilder.Entity("Idea.Data.Models.CelestialObjects.Planetary", b =>
                {
                    b.HasOne("Idea.Data.Models.Locations.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Idea.Data.Models.CelestialObjects.PlanetaryType", "PlanetaryType")
                        .WithMany()
                        .HasForeignKey("PlanetaryTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("PlanetaryType");
                });

            modelBuilder.Entity("Idea.Data.Models.CelestialObjects.Star", b =>
                {
                    b.HasOne("Idea.Data.Models.Locations.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Idea.Data.Models.Locations.Coordinate", b =>
                {
                    b.HasOne("Idea.Data.Models.Locations.Location", null)
                        .WithMany("Coordinates")
                        .HasForeignKey("LocationId");

                    b.HasOne("Idea.Data.Models.CelestialObjects.Planetary", null)
                        .WithMany("Coordinates")
                        .HasForeignKey("PlanetaryId");

                    b.HasOne("Idea.Data.Models.CelestialObjects.Star", null)
                        .WithMany("Coordinates")
                        .HasForeignKey("StarId");
                });

            modelBuilder.Entity("Idea.Data.Models.Locations.Location", b =>
                {
                    b.HasOne("Idea.Data.Models.Locations.LocationType", "LocationType")
                        .WithMany()
                        .HasForeignKey("LocationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LocationType");
                });

            modelBuilder.Entity("Idea.Data.Models.Materials.ComplexMaterialRequirement", b =>
                {
                    b.HasOne("Idea.Data.Models.Materials.BasicMaterial", "BasicMaterial")
                        .WithMany()
                        .HasForeignKey("BasicMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Idea.Data.Models.Materials.ComplexMaterial", "ComplexMaterial")
                        .WithMany("Requirements")
                        .HasForeignKey("ComplexMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BasicMaterial");

                    b.Navigation("ComplexMaterial");
                });

            modelBuilder.Entity("Idea.Data.Models.Ships.Spaceship", b =>
                {
                    b.HasOne("Idea.Data.Models.IdeaUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Idea.Data.Models.CelestialObjects.Planetary", b =>
                {
                    b.Navigation("Coordinates");
                });

            modelBuilder.Entity("Idea.Data.Models.CelestialObjects.Star", b =>
                {
                    b.Navigation("Coordinates");
                });

            modelBuilder.Entity("Idea.Data.Models.Locations.Location", b =>
                {
                    b.Navigation("Coordinates");
                });

            modelBuilder.Entity("Idea.Data.Models.Materials.ComplexMaterial", b =>
                {
                    b.Navigation("Requirements");
                });
#pragma warning restore 612, 618
        }
    }
}
